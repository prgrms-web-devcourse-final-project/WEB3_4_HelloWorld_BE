name: Deploy to EC2 docker-compose

on:
  push:
    tags:
      - 'v*.*.*'  # 예: v1.0.0

env:
  VERSION: ${{ github.ref_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: team12-app1

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{secrets.ACTION_TOKEN}}
          submodules: true

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Make directory for deliver
        run: mkdir deploy

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Copy jar
        run: cp ./build/libs/*.jar ./deploy/

      # docker-compose.deploy.yml 환경 변수 포함 생성
      - name: Generate docker-compose.deploy.yml with version and secrets
        run: |
          export RDS_HOST=${{ secrets.RDS_HOST }}          
          export RDS_PORT=${{ secrets.RDS_PORT }}
          export DB_NAME=${{ secrets.DB_NAME }}
          export MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}
          export MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          export VERSION=${{ github.ref_name }}
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          export DOCKER_REPOSITORY=${{ secrets.DOCKER_REPOSITORY }}

          envsubst '$RDS_HOST $RDS_PORT $DB_NAME $MYSQL_USERNAME $MYSQL_PASSWORD $VERSION $DOCKER_USERNAME $DOCKER_REPOSITORY' \
          < ./docker/gymmate-deploy/docker-compose.deploy.template \
          > ./docker/gymmate-deploy/docker-compose.deploy.yml

      # application.yml 환경 변수 포함 생성
      - name: Generate application-deploy.yml with secrets
        run: |
          export OAUTH_KAKAO_CLIENT_ID=${{ secrets.OAUTH_KAKAO_CLIENT_ID }}
          export OAUTH_KAKAO_CLIENT_SECRET=${{ secrets.OAUTH_KAKAO_CLIENT_SECRET }}
          export OAUTH_KAKAO_REDIRECT_URI_SUFFIX=${{ secrets.OAUTH_KAKAO_REDIRECT_URI_SUFFIX }}
          export JWT_SECRET=${{ secrets.JWT_SECRET }}
          export S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}
          export S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}
          export KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}
          export BUSINESS_URL=${{ secrets.BUSINESS_URL }}
          export BUSINESS_KEY=${{ secrets.BUSINESS_KEY }}
          envsubst < ./src/main/resources/docs/application.template > ./src/main/resources/application.yml

      # application-deploy.yml 환경 변수 포함 생성
      - name: Generate application-deploy.yml with secrets
        run: |
          export RDS_HOST=${{ secrets.RDS_HOST }}
          export RDS_PORT=${{ secrets.RDS_PORT }}
          export DB_NAME=${{ secrets.DB_NAME }}
          export MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}
          export MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          envsubst < ./src/main/resources/docs/application-deploy.template > ./src/main/resources/application-deploy.yml

      ## backend 도커 이미지 빌드 후 도커허브에 push하기
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: docker/gymmate-deploy
          file: docker/gymmate-deploy/Dockerfile-deploy-backend
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:cache
          cache-to: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:cache,mode=max
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }},
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      # nginx.conf 경로 변경 후 도커 컴포즈 실행하기
      # 도커 허브에서 jar파일 및 pull후에 컴포즈 up
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          username: ec2-user
          host: ${{ secrets.AWS_DEV_HOSTNAME }}
          key: ${{ secrets.AWS_DEV_PRIVATE_KEY }}
          script: |
            touch abc.txt
