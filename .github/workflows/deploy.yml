name: Deploy to EC2 docker-compose

on:
  push:
    tags:
      - 'v*.*.*'  # 예: v1.0.0

env:
  VERSION: ${{ github.ref_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: team12-app1

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{secrets.ACTION_TOKEN}}
          submodules: true

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Make directory for deliver
        run: mkdir deploy

      # application.yml 환경 변수 포함 생성
      - name: Generate application-deploy.yml with secrets
        run: |
          export OAUTH_KAKAO_CLIENT_ID=${{ secrets.OAUTH_KAKAO_CLIENT_ID }}
          export OAUTH_KAKAO_CLIENT_SECRET=${{ secrets.OAUTH_KAKAO_CLIENT_SECRET }}
          export OAUTH_KAKAO_REDIRECT_URI_SUFFIX=${{ secrets.OAUTH_KAKAO_REDIRECT_URI_SUFFIX }}
          export JWT_SECRET=${{ secrets.JWT_SECRET }}
          export S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}
          export S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}
          export KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}
          export BUSINESS_URL=${{ secrets.BUSINESS_URL }}
          export BUSINESS_KEY=${{ secrets.BUSINESS_KEY }}
          envsubst < ./src/main/resources/docs/application.template > ./src/main/resources/application.yml

      # application-deploy.yml 환경 변수 포함 생성
      - name: Generate application-deploy.yml with secrets
        run: |
          export RDS_HOST=${{ secrets.RDS_HOST }}
          export RDS_PORT=${{ secrets.RDS_PORT }}
          export DB_NAME=${{ secrets.DB_NAME }}
          export MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}
          export MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          export REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          envsubst < ./src/main/resources/docs/application-deploy.template > ./src/main/resources/application-deploy.yml

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Copy jar
        run: cp ./build/libs/*.jar ./deploy/

      ## backend 도커 이미지 빌드 후 도커허브에 push하기
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker/gymmate-deploy/Dockerfile-deploy-backend
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:cache
          cache-to: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:cache,mode=max
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }},
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      # nginx.conf 경로 변경 후 도커 컴포즈 실행하기
      # 도커 허브에서 jar파일 및 pull후에 컴포즈 up
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          username: ec2-user
          host: ${{ secrets.AWS_DEV_HOSTNAME }}
          key: ${{ secrets.AWS_DEV_PRIVATE_KEY }}
          script: |
            # 공통 변수
            IMAGE="ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
            VOLUME="/gen:/gen"
            NETWORK="common"
            HEALTH_ENDPOINT="/actuator/health"
            TIMEOUT=60

            # 현재 실행 중인 컨테이너 확인
            if sudo docker ps --format '{{.Names}}' | grep -q "app1_1"; then
              CURRENT="app1_1"
              NEXT="app1_2"
              CURRENT_PORT=8080
              NEXT_PORT=8081
            else
              CURRENT="app1_2"
              NEXT="app1_1"
              CURRENT_PORT=8081
              NEXT_PORT=8080
            fi

            # 다음 컨테이너 실행
            echo "Starting new container: $NEXT on port $NEXT_PORT..."
            sudo docker pull "$IMAGE"
            sudo docker stop "$NEXT" 2>/dev/null
            sudo docker rm "$NEXT" 2>/dev/null
            sudo docker run -d \
              -v $VOLUME \
              --network $NETWORK \
              --name "$NEXT" \
              -p "$NEXT_PORT":8080 \
              "$IMAGE"

            # 헬스체크 대기
            echo "Waiting for health check..."
            START_TIME=$(date +%s)
            while true; do
              CONTENT=$(curl -s http://localhost:$NEXT_PORT$HEALTH_ENDPOINT)

              if [[ "$CONTENT" == *'"status":"UP"'* ]]; then
                echo "✅ $NEXT is UP!"
                break
              fi

              ELAPSED_TIME=$(( $(date +%s) - START_TIME ))
              if [[ $ELAPSED_TIME -ge $TIMEOUT ]]; then
                echo "❌ Timeout: $NEXT did not start in $TIMEOUT seconds."
                sudo docker stop "$NEXT"
                exit 1
              fi

              echo "⏳ Waiting for $NEXT to be UP..."
              sleep 5
            done

            sleep 10 # ha proxy 가 사용하는 dns 캐시 때문에 서비스가 띄워지고도 10초 후에 발견될 수 도 있다. 그래서 기존 서버를 바로 내리지 않는다.

            # 기존 컨테이너 중지 및 제거
            echo "Stopping old container: $CURRENT"
            sudo docker stop "$CURRENT" 2>/dev/null
            sudo docker rm "$CURRENT" 2>/dev/null

            # dangling image 제거
            sudo docker rmi $(docker images -f "dangling=true" -q) 2>/dev/null

            echo "✅ Deployment complete. Running container: $NEXT on port $NEXT_PORT"
