name: Deploy to EC2 docker-compose

on:
  push:
    tags:
      - 'v*.*.*'  # 예: v1.0.0

env:
  VERSION: ${{ github.ref_name }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{secrets.ACTION_TOKEN}}
          submodules: true

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Make directory for deliver
        run: mkdir deploy

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Copy jar
        run: cp ./build/libs/*.jar ./deploy/

      - name: Generate docker-compose.deploy.yml with version
        run: |
          VERSION=${{ env.VERSION }} envsubst < ./docker/gymmate-deploy/docker-compose.deploy.yml.template > ./docker/gymmate-deploy/docker-compose.deploy.yml

      # 도커 컴포즈 설정 파일 서버로 전달하기(복사 후 붙여넣기)
      - name: Send docker-compose.deploy.yml
        uses: appleboy/scp-action@master
        with:
          username: ec2-user
          host: ${{ secrets.AWS_DEV_HOSTNAME }}
          key: ${{ secrets.AWS_DEV_PRIVATE_KEY }}
          source: "./docker/gymmate-deploy/docker-compose.deploy.yml"
          target: "/home/ec2-user/"

      # nginx 설정 파일 서버로 전달하기(복사 후 붙여넣기)
      - name: Send nginx.conf
        uses: appleboy/scp-action@master
        with:
          username: ec2-user
          host: ${{ secrets.AWS_DEV_HOSTNAME }}
          key: ${{ secrets.AWS_DEV_PRIVATE_KEY }}
          source: "./nginx/nginx.conf"
          target: "/home/ec2-user/"

      ## backend 도커 이미지 빌드 후 도커허브에 push하기
      ## backend 도커 이미지 빌드 후 도커허브에 push하기
      - name: Backend docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPOSITORY }}:backend-${{ env.VERSION }} -f docker/Dockerfile .
          docker push ${{ secrets.DOCKER_REPOSITORY }}:backend-${{ env.VERSION }}

      ## nginx 도커 이미지 빌드 후 도커허브에 push하기
      - name: Nginx docker build and push
        run: |
          cd ./nginx
          docker build -t ${{ secrets.DOCKER_REPOSITORY }}:nginx .
          docker push ${{ secrets.DOCKER_REPOSITORY }}:nginx

      # nginx.conf 경로 변경 후 도커 컴포즈 실행하기
      # 도커 허브에서 jar파일 및 pull후에 컴포즈 up
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          username: ec2-user
          host: ${{ secrets.AWS_DEV_HOSTNAME }}
          key: ${{ secrets.AWS_DEV_PRIVATE_KEY }}
          script: |
            # 최신 backend 및 nginx 이미지 가져오기
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ secrets.DOCKER_REPOSITORY }}:backend-${{ env.VERSION }}
            docker pull ${{ secrets.DOCKER_REPOSITORY }}:nginx
            # nginx.conf 복사
            sudo cp /home/ec2-user/nginx/nginx.conf /home/ec2-user/src/main/resources/backend-config/nginx/nginx.conf
            # 기존 컨테이너 종료 및 새로운 컨테이너 실행
            docker-compose -f docker-compose.deploy.yml down
            docker image prune -f
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} DOCKER_REPOSITORY=${{ secrets.DOCKER_REPOSITORY }} VERSION=${{ env.VERSION }} docker-compose -f docker-compose.deploy.yml up -d
